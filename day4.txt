using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace day4
{
    class Program
    {
        static void Main(string[] args)
        {

            p2 a = new p2();
            //Console.WriteLine(a.print());
            a.print();
            Console.ReadLine();
        }
    }
    class p1
    {
        public virtual void print()
        {
            Console.WriteLine("hi");
        }
    }
    class p2:p1
    {
        public override void print()
        {
            Console.WriteLine("bye");
        }
    }
    
}



[11:31] Vikash Verma
    
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace Day_4
{​​​​​​​
    public class ClassA
    {​​​​​​​
        int n1, n2;


        public ClassA()
        {​​​​​​​
            Console.WriteLine("I am Base class Constructor");
        }​​​​​​​
        public ClassA(int i, int j)
        {​​​​​​​
            n1 = i;
            n2 = j;
            Console.WriteLine("Parameterized Constructor Invoked");
            Console.WriteLine("Values are" + n1 + " and " + n2);
        }​​​​​​​


        public virtual void Swap()
        {​​​​​​​
            Console.WriteLine("Hi I am swap Function ");
        }​​​​​​​
    }​​​​​​​


    public class DerivedClass : ClassA
    {​​​​​​​


        public DerivedClass() : base() {​​​​​​​ }​​​​​​​
        public DerivedClass(int i,int j) : base(i, j) {​​​​​​​
            base.Swap();
        }​​​​​​​
    }​​​​​​​
    class Class3
    {​​​​​​​
        public static void Main()
        {​​​​​​​
            DerivedClass d = new DerivedClass();
            DerivedClass d2 = new DerivedClass(10, 20);
            Console.ReadLine();
        }​​​​​​​
    }​​​​​​​
}​​​​​​​


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Day_3
{
    class Class7
    {
        public static void Main()
        {
            Program p = new Program();
            p.mul(2,3);
            p.mul(3);
            p.mul(2, 3, 1);
            p.mul("jijo","lala");
            Console.ReadLine();
        }
        
    }
    class Program
    {
        public void mul(int a, int b)
        {
            Console.WriteLine("The multiplication of  2 numbers is:"+(a*b ));
        }
 
        public void mul(int a,int b,int c)
        {
            Console.WriteLine("The multiplication of  3 numbers is:" + (a * b*c));
        }
        public void mul(int a)
        {
            Console.WriteLine("The multiplication of the  number with 2 is:" + (a * 2));
        }
        public void mul(String a, String b)
           {
            Console.WriteLine("The multiplication of  2 Strings is:" + (a +b));
        }
     
    }
  
}


--------------------------------------------------------------------------------------------------------
    Create a C# program that prompts the user for three names of people and stores them in an array of Person-type objects. There will be two people of the Student type and one person of the Teacher type.

To do this, create a Person class that has a Name property of type string, a constructor that receives the name as a parameter and overrides the ToString () method.

Then create two more classes that inherit from the Person class, they will be called Student and Teacher. The Student class has a Study method that writes by console that the student is studying. The Teacher class will have an Explain method that writes to the console that the teacher is explaining. Remember to also create two constructors on the child classes that call the parent constructor of the Person class.

End the program by reading the people (the teacher and the students) and execute the Explain and Study methods.

 

using System;
namespace today
{
class person
{
	public string name;
	public  person(string name)
	{
		this.name=name;
	}
	public override string ToString()
	{
		return name;	
	}
}
class student:person
{
	public student(string name):base(name) {}
	
	public void study()
	{
		Console.WriteLine("the student " +name+" is studying");	
	}
}
class teacher:person
{
	public teacher(string name):base(name) {}
	public void explain()
	{
		Console.WriteLine("the teacher " +name+" is explaining");
	}
}
public class main
{
	public static void Main(string[]args)
	{
		student s1=new student("ravi");
		s1.study();
		teacher t1=new teacher("seema");
		t1.explain();
		person p1=new person("person");
		Console.WriteLine(p1.ToString());
		
	}
}
}



// Create a C# program that prompts the user for three names of people and stores them in an array of Person-type objects. There will be two people of the Student type and one person of the Teacher type.

To do this, create a Person class that has a Name property of type string, a constructor that receives the name as a parameter and overrides the ToString () method.
Then create two more classes that inherit from the Person class, they will be called Student and Teacher. The Student class has a Study method that writes by console that the student is studying. The Teacher class will have an Explain method that writes to the console that the teacher is explaining. Remember to also create two constructors on the child classes that call the parent constructor of the Person class.
End the program by reading the people (the teacher and the students) and execute the Explain and Study methods.




using System;
 
public class InheritanceObjects
{
    public static void Main(string[] args)
    {
        int total = 3;
        Person[] persons = new Person[total];
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
                persons[i] = new Teacher(Console.ReadLine());
            }
            else
            {
                persons[i] = new Student(Console.ReadLine());
            }
        }
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
               ((Teacher)persons[i]).Explain();
 
            }
            else
            {
                ((Student)persons[i]).Study();
            }
        }
    }
 
    public class Person
    {
        protected string Name { get; set; }
 
        public Person(string name)
        {
            Name = name;
        }
 
        public override string ToString()
        {
            return "Hello! My name is " + Name;
        }
 
        ~Person()
        {
            Name = string.Empty;
        }
    }
 
    public class Teacher : Person
    {
        public Teacher(string name) : base(name)
        {
            Name = name;
        }
 
        public void Explain()
        {
            Console.WriteLine("Explain");
        }
    }


/// UML DIA
public class Shape
{
    protected Location c;
 
    public string ToString()
    {
        return string.Empty;
    }
 
    public double Area()
    {
        return 0.000;
    }
 
    public double Perimeter()
    {
        return 0.000;
    }
}
 
public class Location
{
    private double x, y;
}
 
public class Rectangle : Shape
{
    protected double side1, side2;
}
 
public class Circle : Shape
{
    protected double radius;
}




